AWSTemplateFormatVersion: '2010-09-09'
Description: 'Create a cross account role that authorizes access for Cloudguard BE.'
REPLACEMENT_METADATA:

Parameters:
  CloudGuardAwsAccountId:
    Description: CloudGuard instance AWS AccountId that is requiring external trust
    Type: String
  ServerlessStage:
    Description: The Serverless stage name
    Type: String
  TimeStamp:
    Description: The current TimeStamp running TimeStamp
    Type: String
  ServerlessRegion:
    Description: The Serverless region
    Type: String

Conditions:
  IsProtegoRegionCondition:
    Fn::Equals:
      - !Sub "${AWS::Region}"
      - !Ref ServerlessRegion

Resources:
  CrossAccountRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: 'CloudGuardServerlessCrossAccountRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              # https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_principal.html
              AWS:
                - !Ref CloudGuardAwsAccountId
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                sts:ExternalId:
                  Fn::Base64: !Sub ${AWS::AccountId}

      Policies:
        - PolicyName: CrossAccountCustomerRO
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                  - lambda:GetFunction
                  - lambda:GetLayerVersion
                  - lambda:UpdateFunctionConfiguration
                  - lambda:ListTags
                  - lambda:UntagResource

                Resource:
                  - !GetAtt ProtegoNode14CodeAnalysisFunction.Arn
                  - !GetAtt ProtegoJavaCodeAnalysisFunction.Arn
                  - !GetAtt ProtegoPython3CodeAnalysisFunction.Arn
                  - !GetAtt ProtegoCSharpCodeAnalysisFunction.Arn
                  - !GetAtt ProtegoFSPInjectorFunction.Arn

              - Effect: Allow
                Action:
                  - lambda:UpdateFunctionCode
                  - lambda:UpdateFunctionConfiguration
                  - lambda:TagResource
                Resource:
                  - !Join [ ":", [ !GetAtt ProtegoNode14CodeAnalysisFunction.Arn,"*"]]
                  - !Join [ ":", [ !GetAtt ProtegoJavaCodeAnalysisFunction.Arn ,"*"]]
                  - !Join [ ":", [ !GetAtt ProtegoPython3CodeAnalysisFunction.Arn,"*"]]
                  - !Join [ ":", [ !GetAtt ProtegoCSharpCodeAnalysisFunction.Arn,"*"]]
                  - !Join [ ":", [ !GetAtt ProtegoFSPInjectorFunction.Arn,"*"]]
                  - !Sub 'arn:aws:lambda:*:${AWS::AccountId}:function:CloudGuardFSPLogsSender*'
                  - !Sub 'arn:aws:lambda:*:${AWS::AccountId}:function:ProtegoFSPLogsSender*'

              - Effect: Allow
                Action:
                  - 'logs:DescribeLogStreams'
                  - 'logs:FilterLogEvents'
                Resource:
                  - !Join [ ":", [ !GetAtt ProtegoPython3CodeAnalysisLogGroup.Arn,"*" ] ]
                  - !Join [ ":", [ !GetAtt ProtegoJavaCodeAnalysisLogGroup.Arn,"*" ] ]
                  - !Join [ ":", [ !GetAtt ProtegoNode14CodeAnalysisLogGroup.Arn,"*" ] ]
                  - !Join [ ":", [ !GetAtt ProtegoCSharpCodeAnalysisLogGroup.Arn,"*" ] ]
                  - !Join [ ":", [ !GetAtt ProtegoFSPInjectorLogGroup.Arn,"*" ] ]

              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub 'arn:aws:s3:::${ServerlessStage}-protego/*'


              - Effect: Allow
                Action:
                  - iam:GetPolicy
                  - iam:GetRole
                  - iam:GetPolicyVersion
                  - iam:GetRolePolicy
                  - iam:ListAttachedRolePolicies
                  - iam:ListRolePolicies
                  - iam:SimulatePrincipalPolicy
                  - cloudwatch:GetMetricData
                  - cloudwatch:GetMetricStatistics
                  - events:ListRuleNamesByTarget
                  - s3:GetBucketNotification
                  - s3:GetBucketLocation
                  - s3:GetBucketAcl
                  - s3:GetBucketPolicy
                  - lambda:ListEventSourceMappings
                  - lambda:ListFunctions
                  - lambda:GetFunction
                  - lambda:GetFunctionConfiguration
                  - lambda:GetPolicy
                  - lambda:ListAliases
                  - lambda:ListTags
                  - lambda:ListVersionsByFunction
                  - lambda:GetLayerVersion
                  - lambda:GetFunctionUrlConfig
                  - sns:ListSubscriptionsByTopic
                  - ec2:DescribeRegions
                Resource: '*'

  ##
  # Protego is installing on your account a Code - Analysis Lambda for each runtime language
  # Java, Python, NodeJs and C#
  # each of this Lambda require also a LogGroup
  #
  ProtegoPython3CodeAnalysisLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: '/aws/lambda/CloudGuardPy3CodeAnalysis'
      RetentionInDays: 30
    DependsOn:
      - PreDeployPhoneHomeCustomResource

  ProtegoJavaCodeAnalysisLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: '/aws/lambda/CloudGuardJavaCodeAnalysis'
      RetentionInDays: 30
    DependsOn:
      - PreDeployPhoneHomeCustomResource

  ProtegoNode14CodeAnalysisLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: '/aws/lambda/CloudGuardNode14CodeAnalysis'
      RetentionInDays: 30
    DependsOn:
      - PreDeployPhoneHomeCustomResource

  ProtegoCSharpCodeAnalysisLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: '/aws/lambda/CloudGuardCsCodeAnalysis'
      RetentionInDays: 30
    DependsOn:
      - PreDeployPhoneHomeCustomResource

  ProtegoFSPInjectorLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: '/aws/lambda/CloudGuardFSPInjector'
      RetentionInDays: 30
    DependsOn:
      - PreDeployPhoneHomeCustomResource

  ##
  # The Execution Role for python Code Analysis Lambda
  #
  CodeAnalysisPython3LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: 'CloudGuardServerlessCodeAnalysisPython3LambdaExecutionRole'
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: CodeAnalysisPython3LambdaExecutionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:

              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - !GetAtt ProtegoPython3CodeAnalysisLogGroup.Arn
              - Effect: Allow
                Action:
                  - 'lambda:GetFunction'
                  - 'lambda:ListLayers'
                  - 'lambda:GetLayerVersion'
                  - 'lambda:ListLayerVersions'
                Resource: '*'

  ##
  # The Execution Role for Java Code Analysis Lambda
  #
  CodeAnalysisJavaLambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: 'CloudGuardServerlessCodeAnalysisJavaLambdaExecutionRole'
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: CodeAnalysisJavaLambdaExecutionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:

              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - !GetAtt ProtegoJavaCodeAnalysisLogGroup.Arn
              - Effect: Allow
                Action:
                  - 'lambda:GetFunction'
                  - 'lambda:ListLayers'
                  - 'lambda:GetLayerVersion'
                  - 'lambda:ListLayerVersions'
                Resource: '*'

  ##
  # The Execution Role for Node Code Analysis Lambda
  #
  CodeAnalysisNode14LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: 'CloudGuardServerlessCodeAnalysisNode14LambdaExecutionRole'
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: CodeAnalysisNode14LambdaExecutionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:

              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - !GetAtt ProtegoNode14CodeAnalysisLogGroup.Arn
              - Effect: Allow
                Action:
                  - 'lambda:GetFunction'
                  - 'lambda:ListLayers'
                  - 'lambda:GetLayerVersion'
                  - 'lambda:ListLayerVersions'
                Resource: '*'

  ##
  # The Execution Role for CSharp Code Analysis Lambda
  #
  CodeAnalysisCSharpLambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: 'CloudGuardServerlessCodeAnalysisCSharpLambdaExecutionRole'
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: CodeAnalysisCSharpLambdaExecutionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:

              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - !GetAtt ProtegoCSharpCodeAnalysisLogGroup.Arn
              - Effect: Allow
                Action:
                  - 'lambda:GetFunction'
                  - 'lambda:ListLayers'
                  - 'lambda:GetLayerVersion'
                  - 'lambda:ListLayerVersions'
                Resource: '*'

  ##
  # The Execution Role for these FSP Injector Lambda
  #
  FSPInjectorLambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: 'CloudGuardServerlessFSPInjectorLambdaExecutionRole'
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: FSPInjectorLambdaExecutionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:

              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - !GetAtt ProtegoFSPInjectorLogGroup.Arn
              - Effect: Allow
                Action:
                  - 'lambda:GetFunction'
                  - 'lambda:GetFunctionConfiguration'
                  - 'lambda:ListLayers'
                  - 'lambda:GetLayerVersion'
                  - 'lambda:ListLayerVersions'
                  - 'lambda:UpdateFunctionConfiguration'
                  # Permission required in order to get the query results from lambda "logs:StartQuery"
                  - 'logs:GetQueryResults'
                Resource: '*'
              # Permission required in order to query the lambda logs and check the max memory usage before adding fsp
              - Effect: Allow
                Action:
                  - 'logs:StartQuery'
                Resource: !Sub 'arn:aws:logs:*:${AWS::AccountId}:log-group:/aws/lambda/*'

  ProtegoPython3CodeAnalysisFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: function_code_analysis_python.lambda_handler
      FunctionName: 'CloudGuardPy3CodeAnalysis'
      Role: !GetAtt CodeAnalysisPython3LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Sub ${ServerlessStage}-protego
        S3Key: !Sub code_analysis_functions/${ServerlessStage}_function_code_analysis_python3.zip
      MemorySize: 3008
      Description: 'Statically analyze Python code'
      Runtime: python3.8
      Timeout: 860
      Tags: [{"Key": "Owner", "Value": "Cloudguard Serverless Security"}]
    DependsOn:
      - CodeAnalysisPython3LambdaExecutionRole

  ProtegoJavaCodeAnalysisFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: io.protego.lambda.Handler
      FunctionName: 'CloudGuardJavaCodeAnalysis'
      Role: !GetAtt CodeAnalysisJavaLambdaExecutionRole.Arn
      Code:
        S3Bucket: !Sub ${ServerlessStage}-protego
        S3Key: code_analysis_functions/function_api_usage_java-1.0.jar
      MemorySize: 3008
      Description: 'Statically analyze Java code'
      Runtime: java11
      Timeout: 860
      Tags: [{"Key": "Owner", "Value": "Cloudguard Serverless Security"}]
    DependsOn:
      - CodeAnalysisJavaLambdaExecutionRole

  ProtegoNode14CodeAnalysisFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.handler
      FunctionName: 'CloudGuardNode14CodeAnalysis'
      Role: !GetAtt CodeAnalysisNode14LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Sub ${ServerlessStage}-protego
        S3Key: !Sub code_analysis_functions/${ServerlessStage}_function_code_analysis_node.zip
      # will be upgraded to 4096 during activate account process (in order to support accounts with low reputation)
      MemorySize: 3008
      Description: 'Statically analyze NodeJs code'
      Runtime: nodejs14.x
      Timeout: 860
      Tags: [{"Key": "Owner", "Value": "Cloudguard Serverless Security"}]
      Layers:
        - !Sub 'arn:aws:lambda:${AWS::Region}:985618988812:layer:aws-lambda-layer-java:1'
    DependsOn:
      - CodeAnalysisNode14LambdaExecutionRole

  ProtegoCSharpCodeAnalysisFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: function_api_usage_c_sharp::function_api_usage_c_sharp.Handler::HandleRequest
      FunctionName: 'CloudGuardCsCodeAnalysis'
      Role: !GetAtt CodeAnalysisCSharpLambdaExecutionRole.Arn
      Code:
        S3Bucket: !Sub ${ServerlessStage}-protego
        S3Key: code_analysis_functions/function_api_usage_c_sharp.zip
      MemorySize: 1024
      Description: 'Statically analyze C# code'
      Runtime: dotnetcore3.1
      Timeout: 860
      Tags: [{"Key": "Owner", "Value": "Cloudguard Serverless Security"}]
    DependsOn:
      - CodeAnalysisCSharpLambdaExecutionRole

  ProtegoFSPInjectorFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: cloudguard.fspinjector.Handler::handleRequest
      FunctionName: 'CloudGuardFSPInjector'
      Role: !GetAtt FSPInjectorLambdaExecutionRole.Arn
      Code:
        S3Bucket: !Sub ${ServerlessStage}-protego
        S3Key: !Sub code_analysis_functions/${ServerlessStage}_fsp_injector_min_template_v9.zip
      MemorySize: 3008
      Description: 'FSP injector, add FSP runtime protection to functions'
      Runtime: java11
      Layers:
        - !Sub 'arn:aws:lambda:${AWS::Region}:553035198032:layer:nodejs12:21'
        - !Sub 'arn:aws:lambda:${AWS::Region}:985618988812:layer:aws-lambda-layer-csharp:1'
      Timeout: 860
      Tags: [{"Key": "Owner", "Value": "Cloudguard Serverless Security"}]
    DependsOn:
      - FSPInjectorLambdaExecutionRole

  ##
  #   @@@ Feature: PROTEGO FSP @@@
  #
  ProtegoAgentBucket:
    Type: 'AWS::S3::Bucket'
    Condition: IsProtegoRegionCondition
    Properties:
      BucketName: !Sub 'protego-fsp-${AWS::AccountId}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: 'alias/CloudGuardServerlessAgentBucketKey'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true
        IgnorePublicAcls: true
    DependsOn:
      - PreDeployPhoneHomeCustomResource

  CloudGuardServerlessAgentBucketKey:
    Type: 'AWS::KMS::Key'
    Properties:
      Description: 'Key for encryption of serverless agent bucket'
      MultiRegion: false
      PendingWindowInDays: 7
      KeyPolicy:
        Version: 2012-10-17
        Id: cloud-guard-serverless-agent-bucket-key
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'
          - Sid: Allow access for Key Administrators
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action:
              - 'kms:ReplicateKey'
              - 'kms:Create*'
              - 'kms:Describe*'
              - 'kms:Enable*'
              - 'kms:List*'
              - 'kms:Put*'
              - 'kms:Update*'
              - 'kms:Revoke*'
              - 'kms:Disable*'
              - 'kms:Get*'
              - 'kms:Delete*'
              - 'kms:ScheduleKeyDeletion'
              - 'kms:CancelKeyDeletion'
            Resource: '*'
          - Sid: Allow usage of the key
            Effect: Allow
            Principal: '*'
            Action:
              - 'kms:DescribeKey'
              - 'kms:Encrypt'
              - 'kms:Decrypt'
              - 'kms:ReEncrypt*'
              - 'kms:GenerateDataKey*'
              - 'kms:PutKeyPolicy'
              - 'kms:ScheduleKeyDeletion'
              - 'kms:CancelKeyDeletion'
            Resource: '*'
            Condition:
              StringEquals:
                aws:PrincipalAccount: !Ref AWS::AccountId
          - Sid: Allow attachment of persistent resources
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action:
              - 'kms:CreateGrant'
              - 'kms:ListGrants'
              - 'kms:RevokeGrant'
            Resource: '*'
            Condition:
              Bool:
                kms:GrantIsForAWSResource: true
    DependsOn:
      - PreDeployPhoneHomeCustomResource

  CloudGuardServerlessAgentBucketKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: 'alias/CloudGuardServerlessAgentBucketKey'
      TargetKeyId: !GetAtt CloudGuardServerlessAgentBucketKey.Arn



  ProtegoAgentBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ProtegoAgentBucket
      PolicyDocument:
        Statement:
          - Sid: ProtegoOnlySecureTransport
            Effect: Deny
            Principal: "*"
            Action: "*"
            Resource: !Sub 'arn:aws:s3:::${ProtegoAgentBucket}/*'
            Condition:
              Bool:
                aws:SecureTransport: "false"
          - Sid: ProtegoPermissions
            Effect: Allow
            Principal: "*"
            Action:
              - "s3:ListBucket"
              - "s3:GetObject"
            Resource:
              - !Sub 'arn:aws:s3:::${ProtegoAgentBucket}'
              - !Sub 'arn:aws:s3:::${ProtegoAgentBucket}/*'
            Condition:
              StringEquals:
                aws:PrincipalAccount: !Ref AWS::AccountId

  ProtegoAgentPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: 'CloudguardFSPPolicy'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:GetBucketPolicy
              - s3:ListBucket
              # this permissions are here only to support older accounts. will not be used for new accounts
              - s3:PutBucketPolicy
              - s3:DeleteBucketPolicy
            Resource: !Sub 'arn:aws:s3:::${ProtegoAgentBucket}'

          - Effect: Allow
            Action:
              - s3:DeleteObject
              - s3:GetObject
              - s3:PutObject
            Resource: !Sub 'arn:aws:s3:::${ProtegoAgentBucket}/*'
          - Effect: Allow
            Action:
              - logs:PutSubscriptionFilter
              - logs:DeleteSubscriptionFilter
              - logs:DescribeSubscriptionFilters
              - logs:DescribeLogGroups
            Resource: !Sub 'arn:aws:logs:*:${AWS::AccountId}:log-group:*:'
      Roles:
        - !Ref CrossAccountRole

  ProtegoFSPLogsPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: 'CloudguardFSPLogsPolicy'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - lambda:CreateFunction
              - lambda:DeleteFunction
              - lambda:AddPermission
            Resource:
              - !Sub 'arn:aws:lambda:*:${AWS::AccountId}:function:CloudGuardFSPLogsSender*'
              - !Sub 'arn:aws:lambda:*:${AWS::AccountId}:function:ProtegoFSPLogsSender*'
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:PutRetentionPolicy
              - logs:DeleteLogGroup
            Resource:
              - !Sub 'arn:aws:logs:*:${AWS::AccountId}:log-group:/aws/lambda/CloudGuardFSPLogsSender*:*'
              - !Sub 'arn:aws:logs:*:${AWS::AccountId}:log-group:/aws/lambda/ProtegoFSPLogsSender*:*'
          - Effect: Allow
            Action:
              - iam:PassRole
            Resource: !GetAtt ProtegoFSPLogsSenderRole.Arn
      Roles:
        - !Ref CrossAccountRole

  ProtegoFSPLogsSenderRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: 'CloudGuardFSPLogsSenderRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: 'ProtegoFSPLogsSenderPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - !Sub 'arn:aws:logs:*:${AWS::AccountId}:log-group:/aws/lambda/CloudGuardFSPLogsSender*:*'
                  - !Sub 'arn:aws:logs:*:${AWS::AccountId}:log-group:/aws/lambda/ProtegoFSPLogsSender*:*'
              - Effect: "Allow"
                Action:
                  - sqs:GetQueueUrl
                  - sqs:SendMessage
                Resource: !Sub 'arn:aws:sqs:${AWS::Region}:${CloudGuardAwsAccountId}:${ServerlessStage}_customer_fsp_logs_queue*'
    DependsOn:
      - PreDeployPhoneHomeCustomResource

  PreDeployPhoneHomeCustomResource:
    Type: Custom::PhoneHomeCustomResource
    Condition: IsProtegoRegionCondition
    Version: '1.0'
    Properties:
      ServiceToken: !Sub "arn:aws:sns:${AWS::Region}:${CloudGuardAwsAccountId}:${ServerlessStage}-${AWS::AccountId}-notifications"
      AccountID: !Ref AWS::AccountId
      TimeStamp: !Ref TimeStamp
      CFTemplateVersion: 27

  PhoneHomeCustomResourceNew:
    Type: Custom::PhoneHomeCustomResource
    Version: '1.0'
    DependsOn:
      - CrossAccountRole
      - ProtegoAgentPolicy
      - ProtegoFSPLogsPolicy
      - ProtegoFSPLogsSenderRole
      - ProtegoAgentBucketPolicy

    Properties:
      ServiceToken: !Sub "arn:aws:sns:${AWS::Region}:${CloudGuardAwsAccountId}:${ServerlessStage}-${AWS::AccountId}-notifications"
      RoleArn: !GetAtt CrossAccountRole.Arn
      AccountID: !Ref AWS::AccountId
      TimeStamp: !Ref TimeStamp
      CFTemplateVersion: 27
      ProtegoFSPLambdaRoleARN: !GetAtt ProtegoFSPLogsSenderRole.Arn

      Features:
        ProtegoBase: true
        ProtegoFSP: true
        ProtegoFSPInjector: true

      Python3CodeAnalysisFunc: !GetAtt ProtegoPython3CodeAnalysisFunction.Arn
      JavaCodeAnalysisFunc: !GetAtt ProtegoJavaCodeAnalysisFunction.Arn
      NodeCodeAnalysisFunc: !GetAtt ProtegoNode14CodeAnalysisFunction.Arn
      CSharpCodeAnalysisFunc: !GetAtt ProtegoCSharpCodeAnalysisFunction.Arn
      FSPInjectorFunc: !GetAtt ProtegoFSPInjectorFunction.Arn
Outputs:
  RoleARN:
    Description: The ARN of the role that can be assumed by the other account.
    Value: !GetAtt CrossAccountRole.Arn
  ProtegoFSPLambdaRoleARN:
    Description: The ARN of the role that can be used by protego fsp logs sender lambda in customer account.
    Value: !GetAtt ProtegoFSPLogsSenderRole.Arn
  FSPInjectorLambdaRoleARN:
    Description: The ARN of the role that is used by fsp injector lambda in customer account.
    Value: !GetAtt FSPInjectorLambdaExecutionRole.Arn
