AWSTemplateFormatVersion: 2010-09-09
Description: Create a cross account role that authorizes access for Cloudguard BE.
Metadata:
  Version: 4.8.0
Parameters:
  CloudGuardAwsAccountId:
    Description: CloudGuard instance AWS AccountId that is requiring external trust
    Type: String
  ServerlessStage:
    Description: The Serverless stage name
    Type: String
  TimeStamp:
    Description: The current TimeStamp running TimeStamp
    Type: String
  ServerlessRegion:
    Description: The Serverless region
    Type: String
Conditions:
  IsProtegoRegionCondition: !Equals 
    - !Sub ${AWS::Region}
    - !Ref ServerlessRegion
Resources:
  CrossAccountRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CloudGuardServerlessCrossAccountRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !Ref CloudGuardAwsAccountId
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                sts:ExternalId: !Base64 
                  Fn::Sub: ${AWS::AccountId}
      Policies:
        - PolicyName: CrossAccountCustomerRO
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                  - lambda:GetFunction
                  - lambda:GetLayerVersion
                  - lambda:UpdateFunctionConfiguration
                  - lambda:ListTags
                  - lambda:UntagResource
                Resource:
                  - !GetAtt ProtegoNode14CodeAnalysisFunction.Arn
                  - !GetAtt ProtegoJavaCodeAnalysisFunction.Arn
                  - !GetAtt ProtegoPython3CodeAnalysisFunction.Arn
                  - !GetAtt ProtegoCSharpCodeAnalysisFunction.Arn
                  - !GetAtt ProtegoFSPInjectorFunction.Arn
              - Effect: Allow
                Action:
                  - lambda:UpdateFunctionCode
                  - lambda:UpdateFunctionConfiguration
                  - lambda:TagResource
                Resource:
                  - !Join 
                    - ':'
                    - - !GetAtt ProtegoNode14CodeAnalysisFunction.Arn
                      - '*'
                  - !Join 
                    - ':'
                    - - !GetAtt ProtegoJavaCodeAnalysisFunction.Arn
                      - '*'
                  - !Join 
                    - ':'
                    - - !GetAtt ProtegoPython3CodeAnalysisFunction.Arn
                      - '*'
                  - !Join 
                    - ':'
                    - - !GetAtt ProtegoCSharpCodeAnalysisFunction.Arn
                      - '*'
                  - !Join 
                    - ':'
                    - - !GetAtt ProtegoFSPInjectorFunction.Arn
                      - '*'
                  - !Sub >-
                    arn:aws:lambda:*:${AWS::AccountId}:function:CloudGuardFSPLogsSender*
                  - !Sub >-
                    arn:aws:lambda:*:${AWS::AccountId}:function:ProtegoFSPLogsSender*
              - Effect: Allow
                Action:
                  - logs:DescribeLogStreams
                  - logs:FilterLogEvents
                Resource:
                  - !Join 
                    - ':'
                    - - !GetAtt ProtegoPython3CodeAnalysisLogGroup.Arn
                      - '*'
                  - !Join 
                    - ':'
                    - - !GetAtt ProtegoJavaCodeAnalysisLogGroup.Arn
                      - '*'
                  - !Join 
                    - ':'
                    - - !GetAtt ProtegoNode14CodeAnalysisLogGroup.Arn
                      - '*'
                  - !Join 
                    - ':'
                    - - !GetAtt ProtegoCSharpCodeAnalysisLogGroup.Arn
                      - '*'
                  - !Join 
                    - ':'
                    - - !GetAtt ProtegoFSPInjectorLogGroup.Arn
                      - '*'
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub arn:aws:s3:::${ServerlessStage}-protego/*
              - Effect: Allow
                Action:
                  - iam:GetPolicy
                  - iam:GetRole
                  - iam:GetPolicyVersion
                  - iam:GetRolePolicy
                  - iam:ListAttachedRolePolicies
                  - iam:ListRolePolicies
                  - iam:SimulatePrincipalPolicy
                  - cloudwatch:GetMetricData
                  - cloudwatch:GetMetricStatistics
                  - events:ListRuleNamesByTarget
                  - s3:GetBucketNotification
                  - s3:GetBucketLocation
                  - s3:GetBucketAcl
                  - s3:GetBucketPolicy
                  - lambda:ListEventSourceMappings
                  - lambda:ListFunctions
                  - lambda:GetFunction
                  - lambda:GetFunctionConfiguration
                  - lambda:GetPolicy
                  - lambda:ListAliases
                  - lambda:ListTags
                  - lambda:ListVersionsByFunction
                  - lambda:GetLayerVersion
                  - lambda:GetFunctionUrlConfig
                  - sns:ListSubscriptionsByTopic
                  - ec2:DescribeRegions
                Resource: '*'
  ProtegoPython3CodeAnalysisLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/CloudGuardPy3CodeAnalysis
      RetentionInDays: 30
    DependsOn:
      - PreDeployPhoneHomeCustomResource
  ProtegoJavaCodeAnalysisLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/CloudGuardJavaCodeAnalysis
      RetentionInDays: 30
    DependsOn:
      - PreDeployPhoneHomeCustomResource
  ProtegoNode14CodeAnalysisLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/CloudGuardNode14CodeAnalysis
      RetentionInDays: 30
    DependsOn:
      - PreDeployPhoneHomeCustomResource
  ProtegoCSharpCodeAnalysisLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/CloudGuardCsCodeAnalysis
      RetentionInDays: 30
    DependsOn:
      - PreDeployPhoneHomeCustomResource
  ProtegoFSPInjectorLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/CloudGuardFSPInjector
      RetentionInDays: 30
    DependsOn:
      - PreDeployPhoneHomeCustomResource
  CodeAnalysisLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CloudGuardServerlessCodeAnalysisLambdaExecutionRole
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: CodeAnalysisLambdaExecutionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !GetAtt ProtegoPython3CodeAnalysisLogGroup.Arn
                  - !GetAtt ProtegoJavaCodeAnalysisLogGroup.Arn
                  - !GetAtt ProtegoNode14CodeAnalysisLogGroup.Arn
                  - !GetAtt ProtegoCSharpCodeAnalysisLogGroup.Arn
              - Effect: Allow
                Action:
                  - lambda:GetFunction
                  - lambda:ListLayers
                  - lambda:GetLayerVersion
                  - lambda:ListLayerVersions
                Resource: '*'
  FSPInjectorLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CloudGuardServerlessFSPInjectorLambdaExecutionRole
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: FSPInjectorLambdaExecutionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !GetAtt ProtegoFSPInjectorLogGroup.Arn
              - Effect: Allow
                Action:
                  - lambda:GetFunction
                  - lambda:GetFunctionConfiguration
                  - lambda:ListLayers
                  - lambda:GetLayerVersion
                  - lambda:ListLayerVersions
                  - lambda:UpdateFunctionConfiguration
                  - lambda:UpdateFunctionCode
                  - logs:GetQueryResults
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:StartQuery
                Resource: !Sub arn:aws:logs:*:${AWS::AccountId}:log-group:/aws/lambda/*
  ProtegoPython3CodeAnalysisFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: function_code_analysis_python.lambda_handler
      FunctionName: CloudGuardPy3CodeAnalysis
      Role: !GetAtt CodeAnalysisLambdaExecutionRole.Arn
      Code:
        S3Bucket: !Sub ${ServerlessStage}-protego
        S3Key: !Sub >-
          code_analysis_functions/${ServerlessStage}_function_code_analysis_python3.zip
      MemorySize: 3008
      Description: Statically analyze Python code
      Runtime: python3.8
      Timeout: 860
      Tags:
        - Key: Owner
          Value: Cloudguard Serverless Security
    DependsOn:
      - CodeAnalysisLambdaExecutionRole
  ProtegoJavaCodeAnalysisFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: io.protego.lambda.Handler
      FunctionName: CloudGuardJavaCodeAnalysis
      Role: !GetAtt CodeAnalysisLambdaExecutionRole.Arn
      Code:
        S3Bucket: !Sub ${ServerlessStage}-protego
        S3Key: code_analysis_functions/function_api_usage_java-1.0.jar
      MemorySize: 3008
      Description: Statically analyze Java code
      Runtime: java11
      Timeout: 860
      Tags:
        - Key: Owner
          Value: Cloudguard Serverless Security
    DependsOn:
      - CodeAnalysisLambdaExecutionRole
  ProtegoNode14CodeAnalysisFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      FunctionName: CloudGuardNode14CodeAnalysis
      Role: !GetAtt CodeAnalysisLambdaExecutionRole.Arn
      Code:
        S3Bucket: !Sub ${ServerlessStage}-protego
        S3Key: !Sub >-
          code_analysis_functions/${ServerlessStage}_function_code_analysis_node.zip
      MemorySize: 3008
      Description: Statically analyze NodeJs code
      Runtime: nodejs14.x
      Timeout: 860
      Tags:
        - Key: Owner
          Value: Cloudguard Serverless Security
      Layers:
        - !Sub >-
          arn:aws:lambda:${AWS::Region}:985618988812:layer:aws-lambda-layer-java:1
    DependsOn:
      - CodeAnalysisLambdaExecutionRole
  ProtegoCSharpCodeAnalysisFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: >-
        function_api_usage_c_sharp::function_api_usage_c_sharp.Handler::HandleRequest
      FunctionName: CloudGuardCsCodeAnalysis
      Role: !GetAtt CodeAnalysisLambdaExecutionRole.Arn
      Code:
        S3Bucket: !Sub ${ServerlessStage}-protego
        S3Key: code_analysis_functions/function_api_usage_c_sharp.zip
      MemorySize: 1024
      Description: Statically analyze C# code
      Runtime: dotnetcore3.1
      Timeout: 860
      Tags:
        - Key: Owner
          Value: Cloudguard Serverless Security
    DependsOn:
      - CodeAnalysisLambdaExecutionRole
  ProtegoFSPInjectorFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: cloudguard.fspinjector.Handler::handleRequest
      FunctionName: CloudGuardFSPInjector
      Role: !GetAtt FSPInjectorLambdaExecutionRole.Arn
      Code:
        S3Bucket: !Sub ${ServerlessStage}-protego
        S3Key: !Sub >-
          code_analysis_functions/${ServerlessStage}_fsp_injector_min_template_v9.zip
      MemorySize: 3008
      Description: FSP injector, add FSP runtime protection to functions
      Runtime: java11
      Layers:
        - !Sub arn:aws:lambda:${AWS::Region}:553035198032:layer:nodejs12:21
        - !Sub >-
          arn:aws:lambda:${AWS::Region}:985618988812:layer:aws-lambda-layer-csharp:1
      Timeout: 860
      Tags:
        - Key: Owner
          Value: Cloudguard Serverless Security
    DependsOn:
      - FSPInjectorLambdaExecutionRole
  ProtegoAgentBucket:
    Type: AWS::S3::Bucket
    Condition: IsProtegoRegionCondition
    Properties:
      BucketName: !Sub protego-fsp-${AWS::AccountId}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true
        IgnorePublicAcls: true
    DependsOn:
      - PreDeployPhoneHomeCustomResource
  ProtegoAgentBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ProtegoAgentBucket
      PolicyDocument:
        Statement:
          - Sid: ProtegoOnlySecureTransport
            Effect: Deny
            Principal: '*'
            Action: '*'
            Resource: !Sub arn:aws:s3:::${ProtegoAgentBucket}/*
            Condition:
              Bool:
                aws:SecureTransport: 'false'
          - Sid: ProtegoPermissions
            Effect: Allow
            Principal: '*'
            Action:
              - s3:ListBucket
              - s3:GetObject
            Resource:
              - !Sub arn:aws:s3:::${ProtegoAgentBucket}
              - !Sub arn:aws:s3:::${ProtegoAgentBucket}/*
            Condition:
              StringEquals:
                aws:PrincipalAccount: !Ref AWS::AccountId
  ProtegoAgentPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CloudguardFSPPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - s3:GetBucketPolicy
              - s3:ListBucket
              - s3:PutBucketPolicy
              - s3:DeleteBucketPolicy
            Resource: !Sub arn:aws:s3:::${ProtegoAgentBucket}
          - Effect: Allow
            Action:
              - s3:DeleteObject
              - s3:GetObject
              - s3:PutObject
            Resource: !Sub arn:aws:s3:::${ProtegoAgentBucket}/*
          - Effect: Allow
            Action:
              - logs:PutSubscriptionFilter
              - logs:DeleteSubscriptionFilter
              - logs:DescribeSubscriptionFilters
              - logs:DescribeLogGroups
            Resource: !Sub 'arn:aws:logs:*:${AWS::AccountId}:log-group:*:'
      Roles:
        - !Ref CrossAccountRole
  ProtegoFSPLogsPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CloudguardFSPLogsPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - lambda:CreateFunction
              - lambda:DeleteFunction
              - lambda:AddPermission
            Resource:
              - !Sub >-
                arn:aws:lambda:*:${AWS::AccountId}:function:CloudGuardFSPLogsSender*
              - !Sub >-
                arn:aws:lambda:*:${AWS::AccountId}:function:ProtegoFSPLogsSender*
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:PutRetentionPolicy
              - logs:DeleteLogGroup
            Resource:
              - !Sub >-
                arn:aws:logs:*:${AWS::AccountId}:log-group:/aws/lambda/CloudGuardFSPLogsSender*:*
              - !Sub >-
                arn:aws:logs:*:${AWS::AccountId}:log-group:/aws/lambda/ProtegoFSPLogsSender*:*
          - Effect: Allow
            Action:
              - iam:PassRole
            Resource: !GetAtt ProtegoFSPLogsSenderRole.Arn
      Roles:
        - !Ref CrossAccountRole
  ProtegoFSPLogsSenderRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CloudGuardFSPLogsSenderRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: ProtegoFSPLogsSenderPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub >-
                    arn:aws:logs:*:${AWS::AccountId}:log-group:/aws/lambda/CloudGuardFSPLogsSender*:*
                  - !Sub >-
                    arn:aws:logs:*:${AWS::AccountId}:log-group:/aws/lambda/ProtegoFSPLogsSender*:*
              - Effect: Allow
                Action:
                  - sqs:GetQueueUrl
                  - sqs:SendMessage
                Resource: !Sub >-
                  arn:aws:sqs:${AWS::Region}:${CloudGuardAwsAccountId}:${ServerlessStage}_customer_fsp_logs_queue*
    DependsOn:
      - PreDeployPhoneHomeCustomResource
  PreDeployPhoneHomeCustomResource:
    Type: Custom::PhoneHomeCustomResource
    Condition: IsProtegoRegionCondition
    Version: '1.0'
    Properties:
      ServiceToken: !Sub >-
        arn:aws:sns:${AWS::Region}:${CloudGuardAwsAccountId}:${ServerlessStage}-${AWS::AccountId}-notifications
      AccountID: !Ref AWS::AccountId
      TimeStamp: !Ref TimeStamp
      CFTemplateVersion: 26
  PhoneHomeCustomResourceNew:
    Type: Custom::PhoneHomeCustomResource
    Version: '1.0'
    DependsOn:
      - CrossAccountRole
      - ProtegoAgentPolicy
      - ProtegoFSPLogsPolicy
      - ProtegoFSPLogsSenderRole
      - ProtegoAgentBucketPolicy
    Properties:
      ServiceToken: !Sub >-
        arn:aws:sns:${AWS::Region}:${CloudGuardAwsAccountId}:${ServerlessStage}-${AWS::AccountId}-notifications
      RoleArn: !GetAtt CrossAccountRole.Arn
      AccountID: !Ref AWS::AccountId
      TimeStamp: !Ref TimeStamp
      CFTemplateVersion: 26
      ProtegoFSPLambdaRoleARN: !GetAtt ProtegoFSPLogsSenderRole.Arn
      Features:
        ProtegoBase: true
        ProtegoFSP: true
        ProtegoFSPInjector: true
      Python3CodeAnalysisFunc: !GetAtt ProtegoPython3CodeAnalysisFunction.Arn
      JavaCodeAnalysisFunc: !GetAtt ProtegoJavaCodeAnalysisFunction.Arn
      NodeCodeAnalysisFunc: !GetAtt ProtegoNode14CodeAnalysisFunction.Arn
      CSharpCodeAnalysisFunc: !GetAtt ProtegoCSharpCodeAnalysisFunction.Arn
      FSPInjectorFunc: !GetAtt ProtegoFSPInjectorFunction.Arn
Outputs:
  RoleARN:
    Description: The ARN of the role that can be assumed by the other account.
    Value: !GetAtt CrossAccountRole.Arn
  ProtegoFSPLambdaRoleARN:
    Description: >-
      The ARN of the role that can be used by protego fsp logs sender lambda in
      customer account.
    Value: !GetAtt ProtegoFSPLogsSenderRole.Arn
  FSPInjectorLambdaRoleARN:
    Description: >-
      The ARN of the role that is used by fsp injector lambda in customer
      account.
    Value: !GetAtt FSPInjectorLambdaExecutionRole.Arn
  CodeAnalysisLambdaRoleARN:
    Description: >-
      The ARN of the role that is used by all code analysis lambdas in customer
      account.
    Value: !GetAtt CodeAnalysisLambdaExecutionRole.Arn
