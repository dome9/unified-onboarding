AWSTemplateFormatVersion: '2010-09-09'
Description: 'Check Point CloudGuard Dome9 unified onboarding'
Metadata:
  Version: 2.0.0

Parameters:  
  S3BucketName:
    Description: The S3 Bucket
    Type: String
  OnboardingId:
    Description: The id of the onboarding process
    Type: String
  ApiBaseUrl:
    Description: The base url of the CloudGuard web API
    Type: String
  CloudGuardApiKeyId:
    Description: The CloudGuard service account API Key Id
    Type: String
  CloudGuardApiKeySecret:
    Description: The CloudGuard service account API Key secret
    Type: String
  LambdaPkgPath:
    Description: The CloudGuard onboarding Lambda package path
    Type: String
  Version:
    Description: The CloudGuard onboarding version
    Type: String

Resources:
  StackModifyCrossAccountUser:
    Type: AWS::IAM::User
    Properties:
      UserName: 'CloudGuard-Onboarding-StackModify-user'

      Policies:
        - PolicyName: CloudGuard-Lambda-StackModify-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: ModifyStack
                Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                  - cloudformation:UpdateStack
                  - cloudformation:DeleteStack
                Resource: !Ref AWS::StackId
          
              - Sid: ModifyFunction
                Effect: Allow
                Action:
                  - lambda:UpdateFunctionCode
                  - lambda:InvokeFunction
                  - lambda:DeleteFunction
                Resource: !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:CloudGuardOnboardingOrchestrator
          
              - Sid: ModifyRole
                Effect: Allow
                Action:
                  - iam:GetRole
                  - iam:DeleteRole
                  - iam:DetachRolePolicy
                  - iam:DeleteRolePolicy
                Resource: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:role/CloudGuard-Lambda-CloudFormation-role
                  
              - Sid: LambdaRemovePermission
                Effect: Allow
                Action: lambda:RemovePermission
                Resource: !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:CloudGuardOnboardingOrchestrator

              - Sid: DeleteUserPolicy
                Effect: Allow
                Action:
                  - iam:GetUser
                  - iam:DeleteUserPolicy
                  - iam:DeleteUser
                  - iam:DeleteAccessKey
                  - iam:ListAccessKeys
                Resource: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:user/CloudGuard-Onboarding-StackModify-user

              - Sid: DeleteSecret
                Effect: Allow
                Action:
                  - secretsmanager:DeleteSecret 
                Resource: !Sub arn:${AWS::Partition}:secretsmanager:*:*:secret:CloudGuardStackModifyCrossAccountUserCredentials-*

              - Sid: GetLmabdaCode
                Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub 'arn:${AWS::Partition}:s3:::${S3BucketName}-${AWS::Region}/*'

  CloudGuardLambdaStackCreationRole:
    Type: AWS::IAM::Role
    DependsOn:
      - StackModifyCrossAccountUser
    Properties:  
      RoleName: 'CloudGuard-Lambda-CloudFormation-role'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'

      Policies:

        - PolicyName: CloudGuard-Lambda-CloudFormation-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: CloudGuardLambdaCloudFormation
                Action:
                  - '*'
                Effect: Allow
                Resource: '*'

        - PolicyName: CloudGuard-Lambda-GetCloudGuardApiKeys-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'secretsmanager:*'
                Resource: 
                  - !Sub arn:${AWS::Partition}:secretsmanager:*:*:secret:CloudGuardCrossAccountUserCredentials-*
                  - !Sub arn:${AWS::Partition}:secretsmanager:*:*:secret:CloudGuardStackModifyCrossAccountUserCredentials-*

      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  StackModifyCrossAccountUserCredentials:
    Type: AWS::IAM::AccessKey
    Properties: 
      Status: Active
      UserName: !Ref StackModifyCrossAccountUser
          
  StackModifyCrossAccountUserCredentialsStored:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: CloudGuardStackModifyCrossAccountUserCredentials
      SecretString: !Sub '{"ACCESS_KEY":"${StackModifyCrossAccountUserCredentials}","SECRET_KEY":"${StackModifyCrossAccountUserCredentials.SecretAccessKey}"}'       
        
  CloudGuardOnboardingOrchestrator:
    Type: AWS::Lambda::Function
    DependsOn:
      - CloudGuardLambdaStackCreationRole
    Properties:
      FunctionName: 'CloudGuardOnboardingOrchestrator'
      Runtime: dotnetcore3.1
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/CloudGuard-Lambda-CloudFormation-role'
      Handler: Dome9.CloudGuardOnboarding.Orchestrator::Dome9.CloudGuardOnboarding.Orchestrator.Function::FunctionHandler
      Timeout: 900
      Code:
       S3Bucket: !Sub '${S3BucketName}-${AWS::Region}'
       S3Key: !Sub '${LambdaPkgPath}'
      Description: Invoke a function during stack creation.
      
  CloudGuardOnboardingOrchestratorInvoke:
    Type: AWS::CloudFormation::CustomResource
    Version: "1.0"
    Properties:
      ServiceToken: !GetAtt CloudGuardOnboardingOrchestrator.Arn
      OnboardingId: !Ref OnboardingId
      ApiBaseUrl: !Ref ApiBaseUrl
      CloudGuardApiKeyId: !Ref CloudGuardApiKeyId
      CloudGuardApiKeySecret: !Ref CloudGuardApiKeySecret
      AwsAccountId: !Ref AWS::AccountId
      AwsPartition: !Ref AWS::Partition
      S3BucketName: !Sub '${S3BucketName}-${AWS::Region}'
      AwsAccountRegion: !Ref AWS::Region   
      EnableRemoteStackModify: true
      RootStackId: !Ref AWS::StackId
      Version: !Ref Version